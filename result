-- Retrive the total number of order placed
SELECT 
    COUNT(order_id) AS Total_orders
FROM
    orders;

-- Calculate the total revenue generated by pizza sales
SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS Total_revenue
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id;
    
-- Identify highest price of pizza
SELECT 
    (pizzas.price), (pizzastypes.Name)
FROM
    pizzas
        JOIN
    pizzastypes ON pizzas.pizza_type_id = pizzas.pizza_type_id
ORDER BY pizzas.price DESC
LIMIT 1

-- identify most common pizza size order
SELECT 
    pizzas.size, COUNT(order_details.order_details_id) AS orders
FROM
    pizzas
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzas.size
order by orders desc;

-- list the top 5 most ordered pizza types along with their quantities
SELECT 
    pizzastypes.Name, COUNT(order_details.quantity) AS quantity
FROM
    pizzastypes
        JOIN
    pizzas ON pizzastypes.pizza_type_id = pizzas.pizza_type_id
        JOIN
    order_details ON pizzas.pizza_id = order_details.pizza_id
GROUP BY pizzastypes.Name
ORDER BY quantity DESC
LIMIT 5;

-- join necessary tables to find  the quantity of each pizza category ordered

SELECT 
    pizzastypes.category,
    SUM(order_details.quantity) AS quantity
FROM
    pizzastypes
        JOIN
    pizzas ON pizzastypes.pizza_type_id = pizzastypes.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizzastypes.category
ORDER BY quantity DESC;

-- determine distribution of order by hour of the day
SELECT 
    HOUR(order_time) AS hour, COUNT(order_id) AS orders
FROM
    orders
GROUP BY HOUR(order_time)
ORDER BY COUNT(order_id) DESC;

-- Join relevant tables to find the category-wise distribution of pizzas

select count(Name) as counts ,category  from pizzastypes
group by category;

-- Group the orders by date and calculate the average number of pizzas ordered per day.
SELECT 
    ROUND(AVG(quantity), 0) as average_number_of_pizzas_ordered_per_day
FROM
    (SELECT 
        orders.order_date, SUM(order_details.quantity) AS quantity
    FROM
        orders
    JOIN order_details ON order_details.order_id = orders.order_id
    GROUP BY orders.order_date) AS order_quantity;
  
-- Determine the top 3 most ordered pizza types based on revenue.

SELECT 
    pizzastypes.name,
    SUM(order_details.quantity * pizzas.price) AS revenue
FROM
    pizzastypes
        JOIN
    pizzas ON pizzas.pizza_type_id = pizzastypes.pizza_type_id
        JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY pizzastypes.name
ORDER BY revenue DESC
LIMIT 3;

-- Calculate the percentage contribution of each pizza type to total revenue.

select pizzastypes.category,
round(sum(order_details.quantity * pizzas.price) / (SELECT 
    ROUND(SUM(order_details.quantity * pizzas.price),
            2) AS Total_sales
FROM
    order_details
        JOIN
    pizzas ON pizzas.pizza_id = order_details.pizza_id) * 100,2) as revenue
from 
pizzastypes
join 
pizzas on pizzastypes.pizza_type_id = pizzas.pizza_type_id
join
order_details on order_details.pizza_id = pizzas.pizza_id
group by pizzastypes.category 
order by revenue desc;

SELECT 
    pizzastypes.category,
    ROUND(((SUM(order_details.quantity * pizzas.price) / 
           (SELECT ROUND(SUM(order_details.quantity * pizzas.price), 2) AS Total_sales
            FROM order_details
            JOIN pizzas ON pizzas.pizza_id = order_details.pizza_id)
           ) * 100), 2) AS revenue_percentage
FROM 
    pizzastypes
JOIN 
    pizzas ON pizzastypes.pizza_type_id = pizzas.pizza_type_id
JOIN
    order_details ON order_details.pizza_id = pizzas.pizza_id
GROUP BY 
    pizzastypes.category 
ORDER BY 
    revenue_percentage DESC;

-- Analyze the cumulative revenue generated over time.

select order_date,round(sum(revenue) over(order by order_date ),2) as cumulative
from
(select orders.order_date,
sum(order_details.quantity * pizzas.price) as revenue
from
order_details
join pizzas on order_details.pizza_id = pizzas.pizza_id
join orders on order_details.order_id = orders.order_id
group by orders.order_date
) as sales;

-- Determine the top 3 most ordered pizza types based on revenue for each pizza category.

select category,Name,revenue from
(select category,Name,revenue,
rank() over (partition by category order by revenue desc) as rn
from
(select pizzastypes.category,pizzastypes.Name,
sum((order_details.quantity)* pizzas.price ) as revenue
from
pizzastypes 
join 
pizzas on pizzas.pizza_type_id = pizzastypes.pizza_type_id
join 
order_details on order_details.pizza_id = pizzas.pizza_id
group by pizzastypes.category,pizzastypes.Name) as a) as bn
where rn <=3;
